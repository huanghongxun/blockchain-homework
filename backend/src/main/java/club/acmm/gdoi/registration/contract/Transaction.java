package club.acmm.gdoi.registration.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Transaction extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"receiptId\",\"type\":\"int256\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"returnCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiptId\",\"type\":\"int256\"},{\"name\":\"valid\",\"type\":\"int256\"}],\"name\":\"acceptReturnCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiptId\",\"type\":\"int256\"},{\"name\":\"valid\",\"type\":\"int256\"}],\"name\":\"acceptTransferCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerGovernment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"debtee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"deadline\",\"type\":\"int256\"}],\"name\":\"transferCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adminAddr\",\"type\":\"address\"},{\"name\":\"_suffix\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CompanyRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"BankRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"GovernmentRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"debtee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiptId\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"TransactionBegin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"debtee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiptId\",\"type\":\"int256\"}],\"name\":\"TransactionEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"debtee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiptId\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"ReturnBegin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"debtee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiptId\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"ReturnEnd\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_RETURNCREDIT = "returnCredit";

    public static final String FUNC_ACCEPTRETURNCREDIT = "acceptReturnCredit";

    public static final String FUNC_REGISTERCOMPANY = "registerCompany";

    public static final String FUNC_ACCEPTTRANSFERCREDIT = "acceptTransferCredit";

    public static final String FUNC_ADDBALANCE = "addBalance";

    public static final String FUNC_REGISTERBANK = "registerBank";

    public static final String FUNC_REGISTERGOVERNMENT = "registerGovernment";

    public static final String FUNC_TRANSFERCREDIT = "transferCredit";

    public static final Event COMPANYREGISTRATION_EVENT = new Event("CompanyRegistration",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BANKREGISTRATION_EVENT = new Event("BankRegistration",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event GOVERNMENTREGISTRATION_EVENT = new Event("GovernmentRegistration",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSACTIONBEGIN_EVENT = new Event("TransactionBegin",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSACTIONEND_EVENT = new Event("TransactionEnd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event RETURNBEGIN_EVENT = new Event("ReturnBegin",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event RETURNEND_EVENT = new Event("ReturnEnd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected Transaction(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Transaction(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Transaction(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Transaction(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> returnCredit(BigInteger receiptId, BigInteger amount) {
        final Function function = new Function(
                FUNC_RETURNCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void returnCredit(BigInteger receiptId, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETURNCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String returnCreditSeq(BigInteger receiptId, BigInteger amount) {
        final Function function = new Function(
                FUNC_RETURNCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, BigInteger> getReturnCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RETURNCREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> acceptReturnCredit(BigInteger receiptId, BigInteger valid) {
        final Function function = new Function(
                FUNC_ACCEPTRETURNCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(valid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturnCredit(BigInteger receiptId, BigInteger valid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURNCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(valid)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnCreditSeq(BigInteger receiptId, BigInteger valid) {
        final Function function = new Function(
                FUNC_ACCEPTRETURNCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(valid)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, BigInteger> getAcceptReturnCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTRETURNCREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> registerCompany(String addr, String name) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCompany(String addr, String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerCompanySeq(String addr, String name) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getRegisterCompanyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERCOMPANY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> acceptTransferCredit(BigInteger receiptId, BigInteger valid) {
        final Function function = new Function(
                FUNC_ACCEPTTRANSFERCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(valid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptTransferCredit(BigInteger receiptId, BigInteger valid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTTRANSFERCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(valid)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptTransferCreditSeq(BigInteger receiptId, BigInteger valid) {
        final Function function = new Function(
                FUNC_ACCEPTTRANSFERCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(receiptId),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(valid)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, BigInteger> getAcceptTransferCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTTRANSFERCREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> addBalance(BigInteger amount) {
        final Function function = new Function(
                FUNC_ADDBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addBalance(BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addBalanceSeq(BigInteger amount) {
        final Function function = new Function(
                FUNC_ADDBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getAddBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> registerBank(String addr, String name) {
        final Function function = new Function(
                FUNC_REGISTERBANK,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerBank(String addr, String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERBANK,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerBankSeq(String addr, String name) {
        final Function function = new Function(
                FUNC_REGISTERBANK,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getRegisterBankInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERBANK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> registerGovernment(String addr, String name) {
        final Function function = new Function(
                FUNC_REGISTERGOVERNMENT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerGovernment(String addr, String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERGOVERNMENT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerGovernmentSeq(String addr, String name) {
        final Function function = new Function(
                FUNC_REGISTERGOVERNMENT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getRegisterGovernmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERGOVERNMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> transferCredit(String debtee, BigInteger amount, BigInteger deadline) {
        final Function function = new Function(
                FUNC_TRANSFERCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(debtee),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(deadline)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferCredit(String debtee, BigInteger amount, BigInteger deadline, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(debtee),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(deadline)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferCreditSeq(String debtee, BigInteger amount, BigInteger deadline) {
        final Function function = new Function(
                FUNC_TRANSFERCREDIT,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(debtee),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(deadline)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getTransferCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERCREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public List<CompanyRegistrationEventResponse> getCompanyRegistrationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(COMPANYREGISTRATION_EVENT, transactionReceipt);
        ArrayList<CompanyRegistrationEventResponse> responses = new ArrayList<CompanyRegistrationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CompanyRegistrationEventResponse typedResponse = new CompanyRegistrationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerCompanyRegistrationEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(COMPANYREGISTRATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerCompanyRegistrationEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(COMPANYREGISTRATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<BankRegistrationEventResponse> getBankRegistrationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BANKREGISTRATION_EVENT, transactionReceipt);
        ArrayList<BankRegistrationEventResponse> responses = new ArrayList<BankRegistrationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BankRegistrationEventResponse typedResponse = new BankRegistrationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerBankRegistrationEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BANKREGISTRATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerBankRegistrationEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BANKREGISTRATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<GovernmentRegistrationEventResponse> getGovernmentRegistrationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GOVERNMENTREGISTRATION_EVENT, transactionReceipt);
        ArrayList<GovernmentRegistrationEventResponse> responses = new ArrayList<GovernmentRegistrationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GovernmentRegistrationEventResponse typedResponse = new GovernmentRegistrationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerGovernmentRegistrationEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(GOVERNMENTREGISTRATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerGovernmentRegistrationEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(GOVERNMENTREGISTRATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransactionBeginEventResponse> getTransactionBeginEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONBEGIN_EVENT, transactionReceipt);
        ArrayList<TransactionBeginEventResponse> responses = new ArrayList<TransactionBeginEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionBeginEventResponse typedResponse = new TransactionBeginEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.debtor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtee = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiptId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerTransactionBeginEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSACTIONBEGIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerTransactionBeginEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSACTIONBEGIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransactionEndEventResponse> getTransactionEndEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONEND_EVENT, transactionReceipt);
        ArrayList<TransactionEndEventResponse> responses = new ArrayList<TransactionEndEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionEndEventResponse typedResponse = new TransactionEndEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.debtor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtee = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiptId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerTransactionEndEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSACTIONEND_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerTransactionEndEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSACTIONEND_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ReturnBeginEventResponse> getReturnBeginEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNBEGIN_EVENT, transactionReceipt);
        ArrayList<ReturnBeginEventResponse> responses = new ArrayList<ReturnBeginEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnBeginEventResponse typedResponse = new ReturnBeginEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.debtor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtee = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiptId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerReturnBeginEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RETURNBEGIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerReturnBeginEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RETURNBEGIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ReturnEndEventResponse> getReturnEndEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNEND_EVENT, transactionReceipt);
        ArrayList<ReturnEndEventResponse> responses = new ArrayList<ReturnEndEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnEndEventResponse typedResponse = new ReturnEndEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.debtor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtee = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiptId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerReturnEndEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RETURNEND_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerReturnEndEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RETURNEND_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Transaction load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Transaction(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Transaction load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Transaction(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Transaction load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Transaction(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Transaction load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Transaction(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Transaction> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _adminAddr, String _suffix) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_adminAddr),
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_suffix)));
        return deployRemoteCall(Transaction.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Transaction> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _adminAddr, String _suffix) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_adminAddr),
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_suffix)));
        return deployRemoteCall(Transaction.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Transaction> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _adminAddr, String _suffix) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_adminAddr),
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_suffix)));
        return deployRemoteCall(Transaction.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Transaction> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _adminAddr, String _suffix) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_adminAddr),
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_suffix)));
        return deployRemoteCall(Transaction.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CompanyRegistrationEventResponse {
        public Log log;

        public String addr;

        public String name;
    }

    public static class BankRegistrationEventResponse {
        public Log log;

        public String addr;

        public String name;
    }

    public static class GovernmentRegistrationEventResponse {
        public Log log;

        public String addr;

        public String name;
    }

    public static class TransactionBeginEventResponse {
        public Log log;

        public String debtor;

        public String debtee;

        public BigInteger receiptId;

        public BigInteger amount;
    }

    public static class TransactionEndEventResponse {
        public Log log;

        public String debtor;

        public String debtee;

        public BigInteger receiptId;
    }

    public static class ReturnBeginEventResponse {
        public Log log;

        public String debtor;

        public String debtee;

        public BigInteger receiptId;

        public BigInteger amount;
    }

    public static class ReturnEndEventResponse {
        public Log log;

        public String debtor;

        public String debtee;

        public BigInteger receiptId;

        public BigInteger amount;
    }
}